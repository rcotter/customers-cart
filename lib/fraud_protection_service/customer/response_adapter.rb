class FraudProtectionService::Customer::ResponseAdapter

  # Process the raw fraud protection service response
  #
  # @param [String] fraud_protection_response that is serialized JSON
  # @return [FraudProtectionService::Customer::Profile] profile
  def handle(fraud_protection_response)
    res = FraudProtectionService::Customer::Profile.new(JSON.parse(fraud_protection_response))
    notify_developers_about_bad_integration unless res.valid? # Notify regarding all downstream mapping errors
    res
  end

  # Return a simulated fraud protection service response when called by SimulatedGateway.post
  # intended to be processed above.
  #
  # @param [Hash] fraud_protection_request as generated by FraudProtectionService::Customers::RequestAdapter.handle
  # @param [Customer] api_request
  # @return [Hash] response
  def simulated_response(fraud_protection_request, api_request)
    {
        approved: 'yes'
    }
  end

  private

  # Airbrake or something
  def notify_developers_about_bad_integration
  end
end
